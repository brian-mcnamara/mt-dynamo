/* Copyright (c) 2019, Salesforce.com, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause.
 * For full license text, see LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause.
 */
package com.salesforce.dynamodbv2.mt.sharedtable.impl

import com.amazonaws.services.dynamodbv2.model.AttributeDefinition
import com.amazonaws.services.dynamodbv2.model.AttributeValue
import com.amazonaws.services.dynamodbv2.model.GetItemRequest
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement
import com.amazonaws.services.dynamodbv2.model.KeyType
import com.amazonaws.services.dynamodbv2.model.PutItemRequest
import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType
import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3ClientBuilder
import com.amazonaws.services.s3.model.CreateBucketRequest
import com.google.common.collect.ImmutableMap
import com.google.common.collect.ImmutableSet
import com.google.common.collect.Lists
import com.salesforce.dynamodbv2.dynamodblocal.AmazonDynamoDbLocal
import com.salesforce.dynamodbv2.mt.context.MtAmazonDynamoDbContextProvider
import com.salesforce.dynamodbv2.mt.context.impl.MtAmazonDynamoDbContextProviderThreadLocalImpl
import com.salesforce.dynamodbv2.mt.mappers.CreateTableRequestBuilder
import com.salesforce.dynamodbv2.mt.mappers.MtAmazonDynamoDb.TenantTable
import com.salesforce.dynamodbv2.mt.mappers.MtAmazonDynamoDbBase
import com.salesforce.dynamodbv2.mt.mappers.sharedtable.SharedTableBuilder
import com.salesforce.dynamodbv2.mt.sharedtable.CreateMtBackupRequest
import com.salesforce.dynamodbv2.mt.sharedtable.MtBackupManager
import com.salesforce.dynamodbv2.mt.sharedtable.MtBackupMetadata
import com.salesforce.dynamodbv2.mt.sharedtable.RestoreMtBackupRequest
import com.salesforce.dynamodbv2.mt.sharedtable.Status
import com.salesforce.dynamodbv2.testsupport.ItemBuilder.HASH_KEY_FIELD
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertNull
import kotlin.test.assertTrue

internal class MtBackupManagerImplTest {

    companion object {
        val REGION = "us-east-1"
        val MT_CONTEXT: MtAmazonDynamoDbContextProvider = MtAmazonDynamoDbContextProviderThreadLocalImpl()

        val bucket: String = "test-basic-backup-create"
        val dynamo = AmazonDynamoDbLocal.getAmazonDynamoDbLocal()

        val sharedTableBinaryHashKey = SharedTableBuilder.builder()
                .withAmazonDynamoDb(dynamo)
                .withContext(MT_CONTEXT)
                .withBackupSupport(REGION, bucket)
                .withTruncateOnDeleteTable(true)
                .withBinaryHashKey(true)
                .build()

        var s3: AmazonS3? = null

        @BeforeAll
        @JvmStatic
        internal fun beforeAll() {
            // TODO: Make this test operate against mock s3 in an autogenerated bucket
            // For now, this test uses a hardcoded bucket living on real s3
            assertNotNull(System.getenv("AWS_SECRET_ACCESS_KEY"), "Please specify AWS credentials to access bucket, or implement mock s3 for this test")
            assertNotNull(System.getenv("AWS_ACCESS_KEY_ID"))

            // first create test bucket if one does not exist
            s3 = AmazonS3ClientBuilder.standard().withRegion(REGION).build()

            // Create bucket
            val createBucketRequest = CreateBucketRequest(bucket)
            s3!!.createBucket(createBucketRequest)
        }
    }

    @Test
    fun testBasicBackupCreate() {
        val tenant = "org1"
        val tableName = "dummy-table"

        MT_CONTEXT.withContext(tenant) {

            sharedTableBinaryHashKey.createTable(CreateTableRequestBuilder.builder()
                    .withTableName(tableName)
                    .withAttributeDefinitions(AttributeDefinition(HASH_KEY_FIELD, ScalarAttributeType.S))
                    .withKeySchema(KeySchemaElement(HASH_KEY_FIELD, KeyType.HASH))
                    .withProvisionedThroughput(1L, 1L).build())
            sharedTableBinaryHashKey.putItem(PutItemRequest(tableName,
                    ImmutableMap.of(HASH_KEY_FIELD, AttributeValue("row1"), "value", AttributeValue("1"))))
            sharedTableBinaryHashKey.putItem(PutItemRequest(tableName,
                    ImmutableMap.of(HASH_KEY_FIELD, AttributeValue("row2"), "value", AttributeValue("2"))))
        }
        val backupManager: MtBackupManager = MtBackupManagerImpl(s3!!.region.toAWSRegion().name, bucket)
        val backupId = "test-backup"

        try {
            // TODO: Don't hardcode the shared table here..
            val table = "mt_shared_table_static_b_no_lsi"
            MT_CONTEXT.withContext(null) {
                backupManager.createMtBackup(CreateMtBackupRequest(backupId, table), sharedTableBinaryHashKey)
                val mtBackupMetadata = backupManager.getBackup(backupId)
                assertNotNull(mtBackupMetadata)
                assertEquals(backupId, mtBackupMetadata.mtBackupId)
                assertEquals(Status.COMPLETE, mtBackupMetadata.status)
                assertTrue(mtBackupMetadata.tenantTables.size > 0)
            }

            val newRestoreTableName = tableName + "-copy"
            val restoreResult = backupManager.restoreTenantTableBackup(RestoreMtBackupRequest(backupId,
                    TenantTable(tenantName = tenant, virtualTableName = tableName),
                    TenantTable(tenantName = tenant, virtualTableName = newRestoreTableName)),
                    sharedTableBinaryHashKey,
                    MT_CONTEXT)

            assertEquals(Status.COMPLETE, restoreResult.status)

            MT_CONTEXT.withContext(tenant) {
                val clonedRow = sharedTableBinaryHashKey.getItem(
                        GetItemRequest(newRestoreTableName, ImmutableMap.of(HASH_KEY_FIELD, AttributeValue("row1"))))
                assertNotNull(clonedRow)
                assertNotNull(clonedRow.item)
                assertEquals("1", clonedRow.item.get("value")!!.s)
            }
        } finally {
            backupManager.deleteBackup(backupId)
            assertNull(backupManager.getBackup(backupId))
        }
    }

    @Test
    fun testListBackups() {
        val backupManager: MtBackupManager = object : MtBackupManagerImpl(s3!!.region.toAWSRegion().name, bucket) {

            // don't actually create data, just create a metadata marker
            override fun createBackupData(
                createMtBackupRequest: CreateMtBackupRequest,
                mtDynamo: MtAmazonDynamoDbBase
            ): MtBackupMetadata {
                return MtBackupMetadata(createMtBackupRequest.backupId, Status.COMPLETE, ImmutableSet.of())
            }
        }

        val backupIds = Lists.newArrayList<String>()
        try {
            for (i in 1..3) {
                val backupId = "testListBackup-$i"
                backupIds.add(backupId)
                backupManager.createMtBackup(
                        CreateMtBackupRequest(backupId, "mt_shared_table_static_b_no_lsi"),
                        sharedTableBinaryHashKey)
            }

            val allBackups: List<MtBackupMetadata> = backupManager.listMtBackups()
            assertTrue(allBackups.size >= 3)
        } finally {
            for (backup in backupIds) {
                backupManager.deleteBackup(backup)
                assertNull(backupManager.getBackup(backup))
            }
        }
    }
}